{"mappings":"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","sources":["node_modules/@swc/helpers/src/_define_property.mjs","src/scripts/tree/PatternNode.js","src/scripts/tree/PatternTree.js","src/scripts/Parser.js","src/scripts/funcs.js","src/scripts/Animation.js","src/scripts/GUIHandler.js","src/scripts/Action.js","src/scripts/actions/GreetAction.js","src/scripts/actions/GetTimeAction.js","src/scripts/actions/GetGenericAction.js","src/scripts/actions/GetHelpAction.js","src/scripts/ActionHandler.js","src/index.js","src/scripts/AlizaChatbot.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","/** Class representing a single word token */\r\nexport default class PatternNode {\r\n    /**\r\n     * Create a node.\r\n     * @param { String } value - The word assigned to this node.\r\n    */\r\n    constructor(value)\r\n    {\r\n        this.value = value;\r\n        this.children = null;\r\n        this.templates = null;\r\n    }\r\n\r\n    /**\r\n     * Checks if node is a leaf.\r\n     * @return { Boolean } Returns true if node has no children. False otherwise.\r\n    */\r\n    isLeaf()\r\n    {\r\n        return this.children == null;\r\n    }\r\n\r\n    /**\r\n     * Checks if node has word set as its value.\r\n     * @param { String } word - The word to check for.\r\n     * @return { Boolean } Returns true if node contains word. False otherwise.\r\n    */\r\n    has(word)\r\n    {\r\n        return this.value === word;\r\n    }\r\n\r\n    /**\r\n     * Checks if node has any children that contain word.\r\n     * @param { String } word - The word to check for.\r\n     * @return { Boolean } Returns true if node has child that has word. False otherwise.\r\n    */\r\n    hasChild(word)\r\n    {\r\n        if(!this.isLeaf())\r\n        {\r\n            return this.children.has(word);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks and returns if this node has templates.\r\n     * @return { Boolean } Returns true if node has any templates. False otherwise.\r\n    */\r\n    hasTemplates()\r\n    {\r\n        return this.templates != null;\r\n    }\r\n\r\n    /**\r\n     * Gets and returns the child of this node that has word.\r\n     * @param { String } word - The word to check for.\r\n     * @return { PatternNode | null } Returns child node if it exists. Null otherwise.\r\n    */\r\n    getChild(word)\r\n    {\r\n        if(!this.isLeaf())\r\n        {\r\n            return this.children.get(word);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Checks and returns all children this node contains.\r\n     * @return { Iterator | null } Returns child nodes if they exists. Null otherwise.\r\n    */\r\n    getChildren()\r\n    {\r\n        if(!this.isLeaf())\r\n        {\r\n            return this.children.entries();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns all the templates in this node.\r\n     * @param { String[] | null }\r\n    */\r\n    getTemplates()\r\n    {\r\n        return this.templates;\r\n    }\r\n\r\n    /**\r\n     * Adds child to this node's children.\r\n     * @param { PatternNode } child - The child node to add.\r\n    */\r\n    insert(child)\r\n    {\r\n        if(this.children == null){ this.children = new Map() };\r\n        this.children.set(child.value, child);\r\n    }\r\n\r\n    /**\r\n     * Adds template to this node.\r\n     * Note: only leaf nodes should have templates.\r\n     * @param { String } template - The template to add.\r\n    */\r\n    addTemplate(template)\r\n    {\r\n        if(!this.hasTemplates()){ this.templates = [] };\r\n        this.templates.push(template);\r\n    }\r\n}\r\n","import PatternNode from './PatternNode.js';\r\n\r\n/** Class representing a tree containing pattern paths */\r\nexport default class PatternTree {\r\n    /**\r\n     * Creates a tree.\r\n    */\r\n    constructor()\r\n    {\r\n        // Represents the top-level of the tree.\r\n        this.children = new Map();\r\n    }\r\n\r\n    /**\r\n     * Checks if node has any top-level children that contain word.\r\n     * @param { String } word - The word to check for.\r\n     * @return { Boolean } Returns true if node has child that has word. False otherwise.\r\n    */\r\n    hasChild(word)\r\n    {\r\n        return this.children.has(word);\r\n    }\r\n\r\n    /**\r\n     * Gets and returns the top-level child of this tree that has word.\r\n     * @param { String } word - The word to check for.\r\n     * @return { PatternNode | undefined } Returns top-level child node if it exists. Undefined otherwise.\r\n    */\r\n    getChild(word)\r\n    {\r\n        return this.children.get(word);\r\n    }\r\n\r\n    /**\r\n     * Returns all children this node contains.\r\n     * @return { Iterator } Returns child nodes.\r\n    */\r\n    getChildren()\r\n    {\r\n        return this.children.entries();\r\n    }\r\n\r\n    /**\r\n     * Adds top-level child to this tree's children.\r\n     * @param { PatternNode } child - The child node to add.\r\n    */\r\n    addChild(child)\r\n    {\r\n        this.children.set(child.value, child);\r\n    }\r\n\r\n    /**\r\n     * Performs a search on this tree. The tree will search for and return\r\n     * the closest match of the passed pattern.\r\n     * @param { String[] } pattern - A tokenized array of strings to search.\r\n     * @return { PatternNode | null } Returns nearest node if it exists. Otherwise null.\r\n    */\r\n    search(pattern)\r\n    {\r\n        let i = 0;\r\n        let found = false;\r\n        // Set starting node as top level node.\r\n        let node =  this.getChild(pattern[i]);\r\n        if(node == undefined){ return null }; // Catch case where first node doesn't exist.\r\n        while(!found && i < pattern.length - 1)\r\n        {\r\n            // If we find a matching child, we search that one.\r\n            if(node.hasChild(pattern[i + 1]))\r\n            {\r\n                node = node.getChild(pattern[i + 1]);\r\n                i++;\r\n            }\r\n            // If we do not have a matching child, we return the current node\r\n            // as the closest match.\r\n            else {\r\n                found = true;\r\n            }\r\n            // The leaf case is accounted for in the while loop.\r\n        }\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * Inserts pattern into tree.\r\n     * @param { String[] } pattern - A tokenized array of strings to insert as nodes.\r\n     * @param { String[] } templates - An array of string templates to attach to the leaf node.\r\n     * Precondition: pattern.length > 0\r\n    */\r\n    insert(pattern, templates)\r\n    {\r\n        let i=0;\r\n\r\n        // Handle case where top level node doesn't already exist first.\r\n        if(!this.hasChild(pattern[i]))\r\n        {\r\n            this.addChild(new PatternNode(pattern[i]))\r\n        }\r\n\r\n        let node = this.getChild(pattern[i]);\r\n        for(i; i < pattern.length - 1; i++)\r\n        {\r\n            // If the child doesn't already exist. We create one.\r\n            if(!node.hasChild(pattern[i + 1]))\r\n            {\r\n                node.insert(new PatternNode(pattern[i + 1]));\r\n            }\r\n            node = node.getChild(pattern[i + 1]);\r\n        }\r\n\r\n        // Once we've reached end of pattern add templates to leaf node.\r\n        templates.forEach(t => node.addTemplate(t));\r\n    }\r\n\r\n    /**\r\n     * Returns a \"pretty\" string representation of this tree for printing.\r\n     * This uses recursion so I wouldn't recomend using this for anything other\r\n     * than debugging.\r\n     * @return { String } String to return.\r\n    */\r\n    stringify()\r\n    {\r\n        return this._stringifyHelper(this.getChildren());\r\n    }\r\n\r\n    _stringifyHelper(children, depth=0, spaceChar=\"-\")\r\n    {\r\n        let s = \"\"\r\n        for(const [value, node] of children)\r\n        {\r\n            s +=  spaceChar.repeat(depth) + `${value}\\n`;\r\n            if(!node.isLeaf())\r\n            {\r\n                s = s + this._stringifyHelper(node.getChildren(), depth + 1, spaceChar)\r\n            }\r\n        }\r\n        return s;\r\n    }\r\n}\r\n","import PatternTree from './tree/PatternTree.js';\r\n\r\n/** Class handles compiling ALIZA data files into trees */\r\nexport default class Parser {\r\n    fileExtension = '.alzml';\r\n\r\n    /**\r\n     * Sends a request to get the aliza file in url.\r\n     * @param { String } url - url of the file to get.\r\n     * @return { Promise } Returns the promise containing the request. Rejects on network error. Resolves on load. Promise passes the request.\r\n    */\r\n    get(url)\r\n    {\r\n        if(!url.endsWith(this.fileExtension)){ throw new Error(`url does not point to valid ALIZA file: ${this.fileExtension}`) };\r\n        return new Promise( (resolve, reject) => {\r\n            let req = new XMLHttpRequest();\r\n            // Aliza files should be parsed as xml regardless of file .ext\r\n            req.overrideMimeType('text/xml');\r\n            req.open('GET', url);\r\n            req.onload = () => resolve(req);\r\n            req.onerror = () => reject(req);\r\n            req.send();\r\n        });\r\n    }\r\n    /**\r\n     * Loads aliza file from url and returns it as an xml object.\r\n     * @param { String } url - url of the file to load.\r\n     * @return { XMLDocument } Returns the XMLDocument object representing the file.\r\n    */\r\n    async load(url)\r\n    {\r\n        const throwError = (msg) => { throw new Error(`Error while loading file: ${msg}`) };\r\n        // The context of the promise's .this() should be the XMLHttpRequest according to mdn.\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onload\r\n        return await this.get(url)\r\n        .then((req) => {\r\n            // Throw an error if the request wasn't successful.\r\n            if(req.status >= 200 && req.status < 300){ return req.responseXML; }\r\n            else throwError(req.statusText);\r\n        })\r\n        // Catch network errors.\r\n        .catch((req) => throwError(req.statusText));\r\n    }\r\n\r\n    /**\r\n     * Tokenizes input into an array of words and returns it.\r\n     * @param { String } s - String input to tokenize.\r\n     * @return { String[] } Returns tokenized array of strings.\r\n    */\r\n    tokenize(s)\r\n    {\r\n        s = s.replace(/(?:\\r\\n|\\r|\\n|!|\\.|\\?|\\*)/g, '').toUpperCase();\r\n        return s.split(' ')\r\n    }\r\n\r\n    /**\r\n     * Compiles contents of file into a PatternTree and returns it.\r\n     * @param { XMLDocument } file - File to compile.\r\n     * @return { PatternTree } Returns compiled file as PatternTree.\r\n    */\r\n    compile(file)\r\n    {\r\n        let patternTree = new PatternTree();\r\n        let alizaTag = file.firstChild;\r\n        for(const ioTag of alizaTag.children)\r\n        {\r\n            let inputPatterns = [];\r\n            let templates = [];\r\n            for(const child of ioTag.children)\r\n            {\r\n                if(child.tagName === 'in'){ inputPatterns.push(this.tokenize(child.textContent)); }\r\n                else if(child.tagName === 'out'){ templates.push(child.textContent); }\r\n            }\r\n\r\n            inputPatterns.forEach( pattern => patternTree.insert(pattern, templates));\r\n        }\r\n        return patternTree;\r\n    }\r\n\r\n    /**\r\n     * Compiles contents of file into a PatternTree and returns it.\r\n     * @param { String } url - url of file to compile.\r\n     * @return { PatternTree } Returns compiled file as PatternTree.\r\n    */\r\n    async loadAndCompile(url)\r\n    {\r\n        let file = await this.load(url);\r\n        return this.compile(file);\r\n    }\r\n\r\n    /**\r\n     * This will do useful conversions like changing common contractions -> full form\r\n     * or convert UK spelling -> US spelling make matches slightly more likely.\r\n     * @param { String } s - The string to process.\r\n     * @returns { String } Returns a processed copy of s.\r\n    */\r\n    process(s)\r\n    {\r\n        \r\n    }\r\n\r\n}\r\n","/**\r\n * This module contains misc. functions that might not apply\r\n * to a single class.\r\n*/\r\n\r\nexport function randomInt(min, max)\r\n{\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport function randomChoice(arr)\r\n{\r\n    if(arr.length > 0)\r\n    {\r\n        return arr[randomInt(0, arr.length - 1)];\r\n    }\r\n    return null;\r\n}\r\n","export default class Animation {\r\n    constructor(delay, frames, loop, callback)\r\n    {\r\n        this.delay = delay; // Delay between each frame.\r\n        this.startIndex = 0;\r\n        this.endIndex = frames.length;\r\n        this.frames = frames;\r\n        this.loop = loop;\r\n        this.callback = callback;\r\n\r\n        this.interval = null;\r\n        this.running = false;\r\n        this.currentIndex = this.startIndex;\r\n    }\r\n\r\n    start(ignoreIfRunning=false)\r\n    {\r\n        if(this.running && ignoreIfRunning){ return };\r\n\r\n        this.interval = setInterval(() => { this.next(); }, this.delay);\r\n        this.currentIndex = this.startIndex;\r\n        this.running = true;\r\n    }\r\n\r\n    stop()\r\n    {\r\n        if(this.interval != null){ clearInterval(this.interval) };\r\n        this.running = false;\r\n        this.currentIndex = this.startIndex;\r\n    }\r\n\r\n    next()\r\n    {\r\n        this.currentIndex++;\r\n        if(this.currentIndex >= this.endIndex)\r\n        {\r\n            if(!this.loop)\r\n            {\r\n                this.stop();\r\n                // Callback is only called if the animation is stopped naturally.\r\n                if(this.callback != null){ this.callback(); }\r\n            }\r\n            this.currentIndex = this.startIndex;\r\n        }\r\n    }\r\n\r\n    setIndex(i)\r\n    {\r\n        if(i === -1){ i = this.endIndex; }\r\n\r\n        i = Math.max(i, this.startIndex);\r\n        i = Math.min(i, this.endIndex);\r\n        \r\n        this.currentIndex = i;\r\n    }\r\n    getIndex()\r\n    {\r\n        return this.currentIndex;\r\n    }\r\n\r\n    getLastIndex()\r\n    {\r\n        return this.endIndex;\r\n    }\r\n\r\n    getAllFrames()\r\n    {\r\n        return this.frames;\r\n    }\r\n\r\n    getFrame(i)\r\n    {\r\n        if(i == null){\r\n            return this.frames[this.currentIndex];\r\n        } else return this.frames[i];\r\n    }\r\n\r\n    isRunning()\r\n    {\r\n        return this.running;\r\n    }\r\n\r\n    setDelay(d)\r\n    {\r\n        this.delay = d;\r\n    }\r\n\r\n    setLoop(b)\r\n    {\r\n        this.loop = b;\r\n    }\r\n}\r\n","import { randomInt } from './funcs.js';\r\nimport Animation from './Animation.js'\r\n\r\n/** Class is an interface for the GUI  */\r\nexport default class GUIHandler {\r\n    // References to relevant tags..\r\n    submitBtnId = 'aliza-submit-btn';\r\n    submitInputId = 'aliza-submit-text';\r\n    transcriptId = 'aliza-transcript';\r\n    alizaCanvasId = 'aliza-portrait-canvas';\r\n    alizaSpeechId = 'aliza-speech-bubble';\r\n\r\n    // Reference to relevant DOM elements.\r\n    submitBtn; // <button> element.\r\n    submitInput; // <input> element.\r\n    transcript; // <div> element.\r\n    alizaCanvas; // <canvas> element.\r\n    alizaSpeech; // <div> element; Aliza's speech bubble.\r\n\r\n    alizaAssetsURL = '../images/aliza_assets';\r\n    alizaAssetNames = [\r\n        'body.png',\r\n        'eyes1.png',\r\n        'eyes2.png',\r\n        'eyes3.png',\r\n        'mouth1.png',\r\n        'mouth2.png',\r\n        'mouth3.png'\r\n    ]\r\n    alizaAssetWidth = 608;\r\n    alizaAssetHeight = 854;\r\n\r\n    askInputText = 'Ask!';\r\n    askPlaceholderText = 'Enter your question for ALIZA here...';\r\n    respondInputText = 'Respond!';\r\n    respondPlaceholderText = 'Enter a response for ALIZA here...';\r\n\r\n\r\n    /**\r\n     * Initializes GUIHandler instance by storing references to relevant document elements.\r\n    */\r\n    async init()\r\n    {\r\n        this.submitBtn = document.getElementById(this.submitBtnId);\r\n        this.submitInput = document.getElementById(this.submitInputId);\r\n        this.transcript = document.getElementById(this.transcriptId);\r\n        this.alizaCanvas = document.getElementById(this.alizaCanvasId);\r\n        this.alizaSpeech = document.getElementById(this.alizaSpeechId);\r\n\r\n        this.btnHandler;\r\n        this.textHandler = (event) => {\r\n            if(event.code === 'Enter')\r\n            {\r\n                event.preventDefault();\r\n                this.submitBtn.click();\r\n            }\r\n        }\r\n\r\n        this.alizaCanvas.width = this.alizaAssetWidth;\r\n        this.alizaCanvas.height = this.alizaAssetHeight;\r\n\r\n        this.alizaAssets = new Map();\r\n        await this.loadAlizaAssets();\r\n\r\n        this.blinkAnimation = new Animation(41.7, [1, 2, 3, 2, 1], false, () => { this.startBlink(); });\r\n        this.talkAnimation = new Animation(41.7, [1, 2, 3, 2, 1], true);\r\n\r\n        this.startBlink(1000);\r\n        this.drawAliza();\r\n\r\n        window.addEventListener(\"resize\", () => { this.updateSpeechBubbleSize(); });\r\n        this.updateSpeechBubbleSize();\r\n\r\n        this.speechBubbleAnimation = null;\r\n    }\r\n\r\n    /**\r\n     * Extracts and returns the text from the text input.\r\n     * @param { Boolean } clearInput - Clears text input after extracting if set to true.\r\n     * @return { String } Returns the string currently in the text field.\r\n    */\r\n    getInput(clearInput=true)\r\n    {\r\n        let text = this.submitInput.value;\r\n        if(clearInput){ this.clearInputField(); }\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Clears the text input.\r\n    */\r\n    clearInputField()\r\n    {\r\n        this.submitInput.value = '';\r\n    }\r\n\r\n    setSubmitHandler(handler)\r\n    {\r\n        this.removeSubmitHandler();\r\n        this.submitBtn.addEventListener('click', handler);\r\n        this.submitInput.addEventListener('keyup', this.textHandler);\r\n        this.btnHandler = handler;\r\n    }\r\n\r\n    removeSubmitHandler()\r\n    {\r\n        if(this.btnHandler)\r\n        {\r\n            this.submitBtn.removeEventListener('click', this.btnHandler);\r\n            this.btnHandler = null;\r\n            this.submitInput.removeEventListener('keyup', this.textHandler);\r\n        }\r\n    }\r\n\r\n    addToTranscript(speaker, text)\r\n    {\r\n        let html = `<span class=\"transcript-element\"><p class=\"transcript-speaker-name\">${speaker}:</p><p class=\"transcript-speaker-text\">${text}</p></span>`;\r\n        this.transcript.insertAdjacentHTML('afterbegin', html);\r\n    }\r\n\r\n    async loadAlizaAssets()\r\n    {\r\n        let width = this.alizaAssetWidth;\r\n        let height = this.alizaAssetHeight;\r\n\r\n        let image;\r\n        let url;\r\n        for(const filename of this.alizaAssetNames)\r\n        {\r\n            url = this.alizaAssetsURL + '/' + filename;\r\n            image = await this.loadImage(url, width, height);\r\n            this.alizaAssets.set(filename, image);\r\n        }\r\n    }\r\n\r\n    loadImage(src, width, height)\r\n    {\r\n        return new Promise((resolve, reject) => {\r\n            let image = new Image(width, height);\r\n            image.onload = () => resolve(image);\r\n            image.onerror = reject;\r\n            image.src = src;\r\n        });\r\n    }\r\n\r\n    drawAliza()\r\n    {\r\n        let canvas = this.alizaCanvas;\r\n\r\n        let images = [\r\n            this.alizaAssets.get('body.png'),\r\n            this.alizaAssets.get(`mouth${this.talkAnimation.getFrame()}.png`),\r\n            this.alizaAssets.get(`eyes${this.blinkAnimation.getFrame()}.png`)\r\n        ]\r\n\r\n        let ratio = Math.min(canvas.width / this.alizaAssetWidth, canvas.height / this.alizaAssetHeight);\r\n\r\n        let ctx = this.alizaCanvas.getContext('2d');\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        for(let img of images)\r\n        {\r\n            ctx.drawImage(img, 0, 0, img.width, img.height, // source rectangle\r\n                   0, 0, canvas.width, canvas.height); // dest rectangle\r\n        }\r\n        this.updateSpeechBubbleText();\r\n        window.requestAnimationFrame(() => { this.drawAliza() });\r\n    }\r\n\r\n    startBlink(delay)\r\n    {\r\n        if(delay == null){ delay = randomInt(2000, 8000); }\r\n        setTimeout(() => { this.blinkAnimation.start() }, delay);\r\n    }\r\n\r\n    updateSpeechBubbleSize()\r\n    {\r\n        let newWidth = this.alizaCanvas.getBoundingClientRect().height;\r\n        this.alizaSpeech.setAttribute('style',  `height: ${newWidth}px`);\r\n    }\r\n\r\n    clearSpeechBubble()\r\n    {\r\n        this.alizaSpeech.innerHTML = '';\r\n    }\r\n\r\n    updateSpeechBubbleText()\r\n    {\r\n        if(this.speechBubbleAnimation != null){\r\n            let frames = this.speechBubbleAnimation.getAllFrames();\r\n            frames = frames.slice(0, this.speechBubbleAnimation.getIndex() + 1);\r\n            this.alizaSpeech.innerHTML = frames.join('');;\r\n        }\r\n    }\r\n\r\n    startSpeak(s)\r\n    {\r\n        return new Promise((resolve, reject) => {\r\n            this.speaking = true;\r\n\r\n            if(this.speechBubbleAnimation != null){\r\n                this.speechBubbleAnimation.stop();\r\n            }\r\n\r\n            let frames = s.split('');\r\n            let callback = () => {\r\n                this.stopSpeak();\r\n                resolve();\r\n            }\r\n            this.speechBubbleAnimation = new Animation(17, frames, false, callback);\r\n            this.speechBubbleAnimation.start();\r\n            this.talkAnimation.start(true);\r\n        });\r\n    }\r\n\r\n    stopSpeak()\r\n    {\r\n        if(!this.speaking){ return; }\r\n\r\n        this.speaking = false;\r\n        this.speechBubbleAnimation.stop();\r\n        this.speechBubbleAnimation.setIndex(-1);\r\n        this.updateSpeechBubbleText();\r\n        this.talkAnimation.stop();\r\n\r\n        this.speechBubbleAnimation = null;\r\n    }\r\n\r\n    isSpeaking()\r\n    {\r\n        return this.speaking;\r\n    }\r\n\r\n    setAskInput()\r\n    {\r\n        this.submitInput.placeholder = this.askPlaceholderText;\r\n        this.submitBtn.innerHTML = this.askInputText;\r\n    }\r\n\r\n    setPromptInput()\r\n    {\r\n        this.submitInput.placeholder = this.respondPlaceholderText;\r\n        this.submitBtn.innerHTML = this.respondInputText;\r\n    }\r\n}\r\n","\r\n/**\r\n * Class is the base class for any chatbot action.\r\n * @abstract\r\n*/\r\nexport default class Action {\r\n    name = ''; // The name of the action.\r\n    description = ''; // Description of action. Used in help message.\r\n\r\n    /**\r\n     * Creates an action.\r\n     * @param { AlizaChatbot } chatbot - The AlizaChatbot instance for this action.\r\n    */\r\n    constructor(chatbot)\r\n    {\r\n        this.chatbot = chatbot;\r\n    }\r\n\r\n    /**\r\n     * Performs the action for this action object.\r\n     * @abstract\r\n    */\r\n    async act(){}\r\n\r\n    getName()\r\n    {\r\n        return this.name;\r\n    }\r\n\r\n    getDesc()\r\n    {\r\n        return this.description;\r\n    }\r\n}\r\n","import Action from '../Action.js';\r\n\r\n/** Action for generating a greeting based on the date / time. */\r\nexport default class GreetAction extends Action {\r\n    name = 'greet';\r\n\r\n    async act()\r\n    {\r\n        let date = new Date();\r\n        let greeting = '';\r\n\r\n        if(date.getMonth() === 12 && date.getDate() === 31){ gretting = 'Happy New Years!'; }\r\n        else if(date.getMonth() === 10 && date.getDate() === 31){ greeting = 'Happy Halloween!'; }\r\n        else if(date.getMonth() === 10 && date.getDate() === 10){ greeting = 'Happy Thanksgiving!'; }\r\n        else if(date.getMonth() === 12){ greeting = 'Happy holidays!'; }\r\n        else if(date.getMonth() === 2 && date.getDate() === 14){ greeting = 'Happy Valentine\\'s day!'; }\r\n        else { // Generate greeting based on time.\r\n            if(date.getHours() <= 12){ greeting = 'Godd morning!'; }\r\n            else if(date.getHours() <= 18){ greeting = 'Good afternoon!'; }\r\n            else if(date.getHours() <= 21){ greeting = 'Good evening!'; }\r\n            else { greeting = 'Good night!'; }\r\n        }\r\n\r\n        this.chatbot.speak(greeting);\r\n    }\r\n}\r\n","import Action from '../Action.js';\r\n\r\n/** Action for getting the date. */\r\nexport default class GetTimeAction extends Action {\r\n    name = 'getTime';\r\n    description = 'tell you today\\'s date.';\r\n    months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n    ]\r\n\r\n    daysOfWeek = [\r\n        'Sunday',\r\n        'Monday',\r\n        'Tuesday',\r\n        'Wednesday',\r\n        'Thursday',\r\n        'Friday',\r\n        'Saturday'\r\n    ]\r\n\r\n    async act()\r\n    {\r\n        let date = new Date();\r\n\r\n        let day = date.getDate()\r\n        let dayOfWeek = this.daysOfWeek[date.getDay()];\r\n        let month = this.months[date.getMonth()];\r\n        let year = date.getFullYear();\r\n\r\n        let hour = date.getHours();\r\n        let minute = date.getMinutes();\r\n\r\n        let message =  `Today's date is ${dayOfWeek}, ${month} ${day}, ${year}. The current time is ${hour}:${minute}.`\r\n        this.chatbot.speak(message);\r\n    }\r\n}\r\n","import Action from '../Action.js';\r\n\r\nimport { randomChoice } from '../funcs.js';\r\n\r\n/** Responsible for displaying the generic message if there was no match. */\r\nexport default class GetGenericAction extends Action {\r\n    name = 'getGeneric';\r\n\r\n    messages = [\r\n        'Sorry, I don\\'t know that one.',\r\n        'Sorry, I don\\'t know what you mean by that.',\r\n        'I don\\'t understand that input. Sorry about that.',\r\n        'I don\\'t understand.',\r\n    ]\r\n\r\n    async act()\r\n    {\r\n        this.chatbot.speak(randomChoice(this.messages));\r\n    }\r\n}\r\n","import Action from '../Action.js';\r\nimport { randomChoice } from '../funcs.js';\r\n\r\n/** Action for getting the weather. */\r\nexport default class WeatherAction extends Action {\r\n    name = 'getHelp';\r\n    description = 'display this help message again.';\r\n\r\n    firstMessage = (\r\n        'To get the best use out of me. I recommend asking only simple ' +\r\n        'questions. I am also capable of certain actions. Would you like ' +\r\n        'to see a list of them? Your options are \"Yes\" or \"No\".'\r\n    );\r\n\r\n    noMessage = ['Alright then.', 'Okay. Let me know if you need something.'];\r\n    okayMessage = ['Sure thing!', 'Alright!', 'Ok!']\r\n    actionMessageEnd = (\r\n        'I\\'d also like to mention that you may call these actions by asking me normally ' +\r\n        'or by directly calling them.'\r\n    )\r\n\r\n    async act()\r\n    {\r\n        let callback = (inputText) => { this.handleInput(inputText); }\r\n        this.chatbot.speak(this.firstMessage);\r\n        this.chatbot.prompt(callback);\r\n    }\r\n\r\n    handleInput(inputText)\r\n    {\r\n        let tokenized = this.chatbot.parser.tokenize(inputText);\r\n        if(tokenized[0] === 'YES')\r\n        {\r\n            this.chatbot.speak(this.generateActionsMessage());\r\n        }\r\n        else if(tokenized[0] === 'NO')\r\n        {\r\n            this.chatbot.speak(randomChoice(this.noMessage));\r\n        }\r\n        else {\r\n            this.chatbot.actions.act('getGeneric');\r\n        }\r\n    }\r\n\r\n    generateActionsMessage()\r\n    {\r\n        let message = randomChoice(this.okayMessage);\r\n        let allActions = this.chatbot.actions.getAllActions();\r\n\r\n        let i = 0;\r\n        for(const [actionName, action] of allActions)\r\n        {\r\n            if(!this.chatbot.actions.isPrivate(action))\r\n            {\r\n                if(i < allActions.size - 1)\r\n                {\r\n                    message += ` The \"${actionName}\" action will have me ${action.getDesc()}`;\r\n                }\r\n                else {\r\n                    message += ` Finally, the ${actionName} action will have me ${action.getDesc()}`;\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        message += this.actionMessageEnd;\r\n        return message;\r\n    }\r\n}\r\n","import Action from './Action.js';\r\n\r\nimport GreetAction from './actions/GreetAction.js';\r\nimport GetTimeAction from './actions/GetTimeAction.js';\r\nimport GetGenericAction from './actions/GetGenericAction.js';\r\nimport GetHelpAction from './actions/GetHelpAction.js';\r\n\r\n/** Class serves as an interface for starting chatbot actions */\r\nexport default class ActionHandler {\r\n    actionClasses = [\r\n        GreetAction,\r\n        GetTimeAction,\r\n        GetGenericAction,\r\n        GetHelpAction\r\n    ]\r\n\r\n    privateActions = [ // Defines all actions hidden from the user.\r\n        GreetAction,\r\n        GetGenericAction\r\n    ]\r\n\r\n    /**\r\n     * Creates an ActionHandler.\r\n    */\r\n    constructor(chatbot)\r\n    {\r\n        this.chatbot = chatbot;\r\n        this.actions = new Map();\r\n        this.createActions();\r\n    }\r\n\r\n    /**\r\n     * Creates all actions and sets them in this.actions.\r\n    */\r\n    createActions()\r\n    {\r\n        for(const cls of this.actionClasses)\r\n        {\r\n            let action = new cls(this.chatbot);\r\n            this.actions.set(action.name, action);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts an action.\r\n     * @param { String } actionName - name of the action to start.\r\n     * @return { Boolean } Returns true if the action was found and started. false otherwise.\r\n    */\r\n    act(actionName)\r\n    {\r\n        let action = this.actions.get(actionName);\r\n        if(action instanceof Action)\r\n        {\r\n            action.act();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getAllActions(){\r\n        return this.actions;\r\n    }\r\n\r\n    isPrivate(action)\r\n    {\r\n        for(const cls of this.privateActions)\r\n        {\r\n            if(action instanceof cls){ return true; }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import AlizaChatbot from './scripts/AlizaChatbot.js';\r\n\r\nnew AlizaChatbot().start();\r\n","import Parser from './Parser.js';\r\nimport PatternTree from './tree/PatternTree.js';\r\n\r\nimport GUIHandler from './GUIHandler.js';\r\nimport ActionHandler from './ActionHandler.js';\r\n\r\nimport { randomChoice } from './funcs.js';\r\n\r\n/** Class handles main chatbot logic.  */\r\nexport default class AlizaChatbot {\r\n    patternFileURL = '/data/data_set.alzml';\r\n    actionPattern = /{action.(.*)}/;\r\n\r\n    /**\r\n     * Creates chatbot instance.\r\n    */\r\n    constructor()\r\n    {\r\n        this.parser = new Parser();\r\n        this.gui = new GUIHandler();\r\n        this.actions = new ActionHandler(this);\r\n        this.patterns;\r\n\r\n        this.prompting = false;\r\n        this.promptCallback = null;\r\n        this.lastInput = '';\r\n    }\r\n\r\n    /**\r\n     * Initializes certain components.\r\n    */\r\n    async start()\r\n    {\r\n        this.patterns = await this.parser.loadAndCompile(this.patternFileURL);\r\n        this.initGUI();\r\n    }\r\n\r\n    /**\r\n     * Initializes GUI component.\r\n    */\r\n    initGUI()\r\n    {\r\n        this.gui.init();\r\n        this.gui.setSubmitHandler(() => this.takeInput());\r\n    }\r\n\r\n    /**\r\n     * Takes in input from the input form and responds.\r\n     * This is automatically called when the Ask button is pressed.\r\n    */\r\n    async takeInput()\r\n    {\r\n        let inputText = this.gui.getInput();\r\n        let responseText = this.getResponse(this.parser.tokenize(inputText));\r\n        let addToTranscript = true;\r\n        if(inputText === '' && this.gui.isSpeaking()) // Enter to skip speak animation.\r\n        {\r\n            addToTranscript = false;\r\n            this.gui.stopSpeak();\r\n        }\r\n        else if(this.prompting){\r\n            // Pass the inputText to whatever originally called for the prompt.\r\n            this.promptCallback(inputText);\r\n            this.setPrompting(false);\r\n        }\r\n        else if(responseText != null && responseText.match(this.actionPattern) != null)\r\n        {\r\n            // Extract action name from matched response.\r\n            let actionName = responseText.replace(/(?:\\r\\n|\\r|\\n|\\{|\\}|)/g, '','').split('.')[1];\r\n            this.actions.act(actionName);\r\n        }\r\n        else if(responseText != null)\r\n        {\r\n            this.speak(responseText);\r\n        }\r\n        else { // Generic messages.\r\n            this.actions.act('getGeneric')\r\n        }\r\n\r\n        if(addToTranscript)\r\n        {\r\n            this.gui.addToTranscript('YOU', inputText);\r\n        }\r\n        this.lastInput = inputText;\r\n    }\r\n\r\n    getResponse(pattern)\r\n    {\r\n        let closest = this.patterns.search(pattern);\r\n        if(closest != null && closest.hasTemplates())\r\n        {\r\n            return randomChoice(closest.getTemplates());\r\n        }\r\n        else return null;\r\n    }\r\n\r\n    /**\r\n     * Tells Aliza to start saying that message.\r\n    */\r\n    async speak(message)\r\n    {\r\n        await this.gui.startSpeak(message);\r\n        this.gui.addToTranscript('ALIZA', message);\r\n    }\r\n\r\n    /**\r\n     * Prompts user for an input.\r\n    */\r\n    prompt(callback)\r\n    {\r\n        this.gui.clearInputField();\r\n        this.setPrompting(true);\r\n        this.promptCallback = callback;\r\n    }\r\n\r\n    setPrompting(b)\r\n    {\r\n        if(b){\r\n            this.gui.setPromptInput();\r\n            this.prompting = true;\r\n        }\r\n        else {\r\n            this.gui.setAskInput();\r\n            this.prompting = false;\r\n        }\r\n    }\r\n}\r\n"],"names":["$bb9a5d09fff8458d$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$51f2bb6fc8520723$export$2e2bcd8739ae039","isLeaf","this","children","has","word","hasChild","hasTemplates","templates","getChild","get","$184402d8aab99ab7$export$2e2bcd8739ae039","entries","child","set","pattern","i","found","node","undefined","length","insert","addChild","$054474fa020401ee$export$2e2bcd8739ae039","url","endsWith","fileExtension","Error","Promise","resolve","reject","req","XMLHttpRequest","overrideMimeType","open","onload","onerror","send","msg","then","status","responseXML","throwError","statusText","catch","replace","toUpperCase","split","file","patternTree","alizaTag","firstChild","inputPatterns","ioTag","$4dfcc03f1be41512$export$3c5f89dae98e900b","min","max","Math","floor","random","$4dfcc03f1be41512$export$94951fac5549ef77","arr","$c26c6baa209dd479$export$2e2bcd8739ae039","start","ignoreIfRunning","running","interval","setInterval","next","delay","currentIndex","startIndex","stop","clearInterval","endIndex","loop","callback","setIndex","getIndex","getLastIndex","getAllFrames","frames","getFrame","isRunning","setDelay","d","setLoop","b","constructor","$58b35ee7e2f33979$export$2e2bcd8739ae039","submitBtn","document","getElementById","submitBtnId","submitInput","submitInputId","transcript","transcriptId","alizaCanvas","alizaCanvasId","alizaSpeech","alizaSpeechId","btnHandler","event","code","preventDefault","click","width","alizaAssetWidth","height","alizaAssetHeight","alizaAssets","Map","loadAlizaAssets","blinkAnimation","startBlink","talkAnimation","drawAliza","addEventListener","updateSpeechBubbleSize","speechBubbleAnimation","clearInput","text","clearInputField","handler","removeSubmitHandler","textHandler","removeEventListener","speaker","html","insertAdjacentHTML","image","filename","alizaAssetNames","alizaAssetsURL","loadImage","src","Image","canvas","images","ctx","getContext","clearRect","img","drawImage","updateSpeechBubbleText","requestAnimationFrame","setTimeout","newWidth","getBoundingClientRect","setAttribute","innerHTML","slice","join","s","speaking","stopSpeak","placeholder","askPlaceholderText","askInputText","respondPlaceholderText","respondInputText","$3df694db6edaefa0$export$2e2bcd8739ae039","async","getName","name","getDesc","description","chatbot","$3535900b1eedf40a$export$2e2bcd8739ae039","date","Date","greeting","getMonth","getDate","gretting","getHours","speak","$03b24fe35ccdc501$export$2e2bcd8739ae039","day","message","daysOfWeek","getDay","months","getFullYear","getMinutes","$8ce07f307356e099$export$2e2bcd8739ae039","messages","$9008f5f766889eb1$export$2e2bcd8739ae039","firstMessage","prompt","inputText","handleInput","tokenized","parser","tokenize","generateActionsMessage","noMessage","actions","act","okayMessage","allActions","getAllActions","actionName","action","isPrivate","size","actionMessageEnd","$438a16c8a82a53e2$export$2e2bcd8739ae039","cls","actionClasses","privateActions","patterns","loadAndCompile","patternFileURL","initGUI","gui","init","setSubmitHandler","takeInput","getInput","responseText","getResponse","addToTranscript","isSpeaking","prompting","promptCallback","setPrompting","match","actionPattern","lastInput","closest","search","getTemplates","startSpeak","setPromptInput","setAskInput"],"version":3,"file":"index.4a45d8f2.js.map"}